//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IIProjectClient.ProjectService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectService.iProjectService")]
    public interface iProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaEvents", ReplyAction="http://tempuri.org/iProjectService/HämtaEventsResponse")]
        System.Xml.Linq.XElement[] HämtaEvents(System.DateTime fromInclusive, System.DateTime toInclusive, string readPointEPC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaEvents", ReplyAction="http://tempuri.org/iProjectService/HämtaEventsResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> HämtaEventsAsync(System.DateTime fromInclusive, System.DateTime toInclusive, string readPointEPC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaPlats", ReplyAction="http://tempuri.org/iProjectService/HämtaPlatsResponse")]
        System.Xml.Linq.XElement HämtaPlats(string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaPlats", ReplyAction="http://tempuri.org/iProjectService/HämtaPlatsResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> HämtaPlatsAsync(string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaFordon", ReplyAction="http://tempuri.org/iProjectService/HämtaFordonResponse")]
        System.Xml.Linq.XElement HämtaFordon(string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaFordon", ReplyAction="http://tempuri.org/iProjectService/HämtaFordonResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> HämtaFordonAsync(string epc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaAllaPlatser", ReplyAction="http://tempuri.org/iProjectService/HämtaAllaPlatserResponse")]
        System.Xml.Linq.XElement HämtaAllaPlatser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/iProjectService/HämtaAllaPlatser", ReplyAction="http://tempuri.org/iProjectService/HämtaAllaPlatserResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> HämtaAllaPlatserAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface iProjectServiceChannel : IIProjectClient.ProjectService.iProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iProjectServiceClient : System.ServiceModel.ClientBase<IIProjectClient.ProjectService.iProjectService>, IIProjectClient.ProjectService.iProjectService {
        
        public iProjectServiceClient() {
        }
        
        public iProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public iProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Xml.Linq.XElement[] HämtaEvents(System.DateTime fromInclusive, System.DateTime toInclusive, string readPointEPC) {
            return base.Channel.HämtaEvents(fromInclusive, toInclusive, readPointEPC);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement[]> HämtaEventsAsync(System.DateTime fromInclusive, System.DateTime toInclusive, string readPointEPC) {
            return base.Channel.HämtaEventsAsync(fromInclusive, toInclusive, readPointEPC);
        }
        
        public System.Xml.Linq.XElement HämtaPlats(string epc) {
            return base.Channel.HämtaPlats(epc);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> HämtaPlatsAsync(string epc) {
            return base.Channel.HämtaPlatsAsync(epc);
        }
        
        public System.Xml.Linq.XElement HämtaFordon(string epc) {
            return base.Channel.HämtaFordon(epc);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> HämtaFordonAsync(string epc) {
            return base.Channel.HämtaFordonAsync(epc);
        }
        
        public System.Xml.Linq.XElement HämtaAllaPlatser() {
            return base.Channel.HämtaAllaPlatser();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> HämtaAllaPlatserAsync() {
            return base.Channel.HämtaAllaPlatserAsync();
        }
    }
}
